
import edu.stanford.nlp.pipeline.StanfordCoreNLP;
import java.awt.Color;
import java.awt.Component;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.net.URL;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JEditorPane;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.text.BadLocationException;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

public class InterfazCb extends javax.swing.JFrame {

    private Chatbot chatbot;
    String input = InterfazLogin.usuarioActual;
    String nombreuser = input.substring(0, 1).toUpperCase() + input.substring(1);

    public InterfazCb() {
        initComponents();

//      jPanelChat.setLayout(new BoxLayout(jPanelChat, BoxLayout.Y_AXIS));
        jLabelMostrarGeneros.setLayout(new FlowLayout());
        appendToChat(nombreuser + "! Me da gusto verte por aquí!\nMi nombre es Pochoclobot y puedo sugerirte películas\nsegún el género que me pidas", false);
        cargarGenerosFavoritos();
        Properties props = new Properties();
        props.setProperty("annotators", "tokenize,ssplit,pos,lemma");
        StanfordCoreNLP pipeline = new StanfordCoreNLP(props);

        chatbot = new Chatbot(pipeline);

        jTextFieldIntent.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                jButtonEnviarActionPerformed(e);
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPaneTodo = new javax.swing.JTabbedPane();
        jPanelCb = new javax.swing.JPanel();
        jTextFieldIntent = new javax.swing.JTextField();
        jButtonEnviar = new javax.swing.JButton();
        jButtonLogout = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPaneChat = new javax.swing.JTextPane();
        jPanelGen = new javax.swing.JPanel();
        jLabelMostrarGeneros = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PochocloBot");
        setResizable(false);

        jTabbedPaneTodo.setBackground(new java.awt.Color(245, 202, 195));
        jTabbedPaneTodo.setForeground(new java.awt.Color(102, 102, 102));
        jTabbedPaneTodo.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jTabbedPaneTodo.setOpaque(true);
        jTabbedPaneTodo.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPaneTodoStateChanged(evt);
            }
        });

        jPanelCb.setBackground(new java.awt.Color(245, 202, 195));

        jTextFieldIntent.setBackground(new java.awt.Color(247, 237, 226));
        jTextFieldIntent.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jTextFieldIntent.setForeground(new java.awt.Color(102, 102, 102));
        jTextFieldIntent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldIntentActionPerformed(evt);
            }
        });

        jButtonEnviar.setBackground(new java.awt.Color(132, 165, 157));
        jButtonEnviar.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jButtonEnviar.setForeground(new java.awt.Color(102, 102, 102));
        jButtonEnviar.setText("Enviar");
        jButtonEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEnviarActionPerformed(evt);
            }
        });

        jButtonLogout.setBackground(new java.awt.Color(132, 165, 157));
        jButtonLogout.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jButtonLogout.setForeground(new java.awt.Color(102, 102, 102));
        jButtonLogout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/exit.png"))); // NOI18N
        jButtonLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLogoutActionPerformed(evt);
            }
        });

        jTextPaneChat.setBackground(new java.awt.Color(132, 165, 157));
        jScrollPane2.setViewportView(jTextPaneChat);

        javax.swing.GroupLayout jPanelCbLayout = new javax.swing.GroupLayout(jPanelCb);
        jPanelCb.setLayout(jPanelCbLayout);
        jPanelCbLayout.setHorizontalGroup(
            jPanelCbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCbLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelCbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanelCbLayout.createSequentialGroup()
                        .addComponent(jTextFieldIntent, javax.swing.GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonEnviar, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanelCbLayout.setVerticalGroup(
            jPanelCbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelCbLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 419, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelCbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButtonEnviar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonLogout, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldIntent))
                .addGap(142, 142, 142))
        );

        jTabbedPaneTodo.addTab("Chatbot", jPanelCb);

        jPanelGen.setBackground(new java.awt.Color(245, 202, 195));

        jLabelMostrarGeneros.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabelMostrarGeneros.setForeground(new java.awt.Color(102, 102, 102));

        javax.swing.GroupLayout jPanelGenLayout = new javax.swing.GroupLayout(jPanelGen);
        jPanelGen.setLayout(jPanelGenLayout);
        jPanelGenLayout.setHorizontalGroup(
            jPanelGenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGenLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabelMostrarGeneros, javax.swing.GroupLayout.PREFERRED_SIZE, 484, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(48, Short.MAX_VALUE))
        );
        jPanelGenLayout.setVerticalGroup(
            jPanelGenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGenLayout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(jLabelMostrarGeneros, javax.swing.GroupLayout.PREFERRED_SIZE, 489, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPaneTodo.addTab("Tus generos mas buscados", jPanelGen);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jTabbedPaneTodo, javax.swing.GroupLayout.PREFERRED_SIZE, 554, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPaneTodo, javax.swing.GroupLayout.PREFERRED_SIZE, 532, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
// </editor-fold>                        

    private void mostrarGenerosEnTextoPaneConPorcentaje(Map<String, Double> generosConPorcentaje) {
        // Limpiar el contenido anterior
        jLabelMostrarGeneros.removeAll();

        // Configurar el layout con GridLayout
        int rows = (int) Math.ceil(generosConPorcentaje.size() / 2.0); // Ajusta el número de filas según la cantidad de géneros
        GridLayout gridLayout = new GridLayout(rows, 2);
        jLabelMostrarGeneros.setLayout(gridLayout);

        // Iterar sobre los géneros y porcentajes
        for (Map.Entry<String, Double> entry : generosConPorcentaje.entrySet()) {
            String genero = entry.getKey();
            Double porcentaje = entry.getValue();

            // Obtener la ruta de la imagen según el nombre del género
            String imagePath = "/img/" + genero.toLowerCase() + ".png";

            // Cargar la imagen y configurarla en un JLabel
            ImageIcon icon = new ImageIcon(getClass().getResource(imagePath));
            JLabel imageLabel = new JLabel(icon);

            // Crear un JEditorPane para aplicar estilos HTML al texto
            JEditorPane textPane = new JEditorPane("text/html", "");
            textPane.setBackground(new Color(245, 202, 195));

            // Configurar el estilo del texto
            String labelText = "<html><body align='center'><b><font face='Verdana' color='#666666' size='4'>" + genero + "<br>" + porcentaje
                    + "%</font></b></body></html>";
            textPane.setText(labelText);

            // Hacer que el JEditorPane no sea editable, sin bordes y transparente
            textPane.setEditable(false);
            textPane.setOpaque(false);

            // Crear un panel adicional para contener la imagen y el texto
            JPanel panel = new JPanel();
            panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
            panel.add(imageLabel);
            panel.add(textPane);
            panel.setBackground(new Color(245, 202, 195));

            // Ajustar la alineación del panel
            panel.setAlignmentX(Component.CENTER_ALIGNMENT);

            // Agregar el panel al contenedor principal
            jLabelMostrarGeneros.add(panel);

            // Asegurarse de que la imagen no se almacene en caché
            if (icon != null) {
                icon.getImage().flush();
            }
        }

        // Actualizar la interfaz
        jLabelMostrarGeneros.revalidate();
        jLabelMostrarGeneros.repaint();
    }

    private String procesarTexto(String textoUsuario) {
        // Realizar preprocesamiento del texto antes de pasarlo al Chatbot
        if (textoUsuario.toLowerCase().contains("gracias")) {
            // Reemplazar "gracias" por "graciass"
            textoUsuario = textoUsuario.replace("gracias", "graciass");
        } else if (textoUsuario.toLowerCase().contains("adios")) {
            // Reemplazar "gracias" por "graciass"
            textoUsuario = textoUsuario.replace("adios", "adioss");
        }
        return textoUsuario;
    }

    private void appendToChat(String message, boolean isUserMessage) {
    // Crea un StyledDocument para trabajar con el JTextPane
    StyledDocument doc = jTextPaneChat.getStyledDocument();

    // Crea un estilo para el mensaje
    SimpleAttributeSet style = new SimpleAttributeSet();

    // Establece el fondo del estilo según si es un mensaje del usuario o del chatbot
    Color backgroundColor = isUserMessage ? Color.decode("#F28482") : Color.decode("#6d6875");
    StyleConstants.setBackground(style, backgroundColor);

    // Establece la alineación del estilo según si es un mensaje del usuario o del chatbot
    StyleConstants.setAlignment(style, isUserMessage ? StyleConstants.ALIGN_RIGHT : StyleConstants.ALIGN_LEFT);

    // Establece la fuente, el tamaño y el color
    StyleConstants.setFontFamily(style, "Verdana");
    StyleConstants.setBold(style, true);
    StyleConstants.setFontSize(style, 14);
    StyleConstants.setForeground(style, new Color(247, 237, 226));

    // Agrega márgenes y espaciado vertical usando saltos de línea antes y después del texto
    String messageWithSpacing = message + "\n\n";

    // Agrega el mensaje al documento con el estilo correspondiente
    try {
        // Obtiene la posición actual del cursor
        int currentPos = doc.getLength();

        // Inserta el mensaje con el estilo
        doc.insertString(currentPos, messageWithSpacing, style);

        // Aplica el estilo solo al nuevo mensaje
        doc.setParagraphAttributes(currentPos, messageWithSpacing.length(), style, false);

        // Inserta el icono solo al comienzo de las respuestas del chatbot
        if (!isUserMessage) {
            // Asegúrate de que el icono está en el lugar correcto en tu proyecto
            URL imageURL = getClass().getResource("/img/received.png");
            ImageIcon icon = new ImageIcon(imageURL);
            StyleConstants.setIcon(style, icon);
            doc.insertString(currentPos, " ", style);
        } else {
            // Inserta la imagen "received.png" al inicio de los mensajes del usuario
            URL imageURL = getClass().getResource("/img/sent.png");
            ImageIcon icon = new ImageIcon(imageURL);
            StyleConstants.setIcon(style, icon);
            doc.insertString(currentPos, " ", style);
        }
    } catch (BadLocationException e) {
    }

    // Asegúrate de que el JTextPane se desplace automáticamente hacia abajo para mostrar el nuevo mensaje
    jTextPaneChat.setCaretPosition(doc.getLength());
}

 
  
  
  private void cargarGenerosFavoritos() {
        // Obtener el ID del usuario actual
        int idUsuario = InterfazRegistro.controlador.obtenerIdUsuarioPorNombre(InterfazLogin.usuarioActual);

        // Obtener los géneros favoritos del usuario con sus porcentajes
        Map<String, Double> generosConPorcentaje = InterfazRegistro.controlador.obtenerPorcentajeGenerosFavoritos(idUsuario);

        // Mostrar los géneros con porcentaje en el jTextPaneMostrarGeneros
        mostrarGenerosEnTextoPaneConPorcentaje(generosConPorcentaje);
    }

    private void mostrarGenerosFavoritos(List<String> generosFavoritos) {
        // Limpiar el contenido anterior
        jLabelMostrarGeneros.removeAll();

        for (String genero : generosFavoritos) {
            // Obtener la ruta de la imagen según el nombre del género
            String imagePath = "/img/" + genero.toLowerCase() + ".png";

            // Cargar la imagen y configurarla en un JLabel
            ImageIcon icon = new ImageIcon(getClass().getResource(imagePath));
            JLabel genreLabel = new JLabel(icon);

// Agregar el JLabel al contenedor
            jLabelMostrarGeneros.add(genreLabel);
        }

        // Actualizar la interfaz
        jLabelMostrarGeneros.revalidate();
        jLabelMostrarGeneros.repaint();
    }


    private void jButtonEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEnviarActionPerformed
        String userInput = jTextFieldIntent.getText();

        // Aplicar preprocesamiento al texto del usuario
        userInput = procesarTexto(userInput);

        appendToChat(userInput, true);

        String intent = chatbot.determinarIntencion(userInput);
        String response = chatbot.getResponseFromDatabase(intent);
        appendToChat(response, false);

        // Limpiar el campo de entrada después de enviar el mensaje
        jTextFieldIntent.setText("");

        int idUsuario = InterfazRegistro.controlador.obtenerIdUsuarioPorNombre(InterfazLogin.usuarioActual);
        int idResponse = InterfazRegistro.controlador.obtenerIdResponseDesdeIntent(intent);

        // Guardar el género favorito en la base de datos
        InterfazRegistro.controlador.guardarGeneroFavorito(idUsuario, idResponse);

        // Obtener los géneros favoritos del usuario
        List<String> generosFavoritos = InterfazRegistro.controlador.obtenerGenerosFavoritosUsuario(idUsuario);

        // Muestra los géneros favoritos en jTextPaneMostrarGeneros
        mostrarGenerosFavoritos(generosFavoritos);


    }//GEN-LAST:event_jButtonEnviarActionPerformed

    private void jTextFieldIntentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldIntentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldIntentActionPerformed

    private void jTabbedPaneTodoStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPaneTodoStateChanged
        // Obtén el índice de la pestaña activa
        int selectedIndex = jTabbedPaneTodo.getSelectedIndex();

        // Actualiza el contenido de la pestaña activa
        if (selectedIndex == 1) {  // Reemplaza 1 con el índice de la pestaña que contiene la información de géneros
            cargarGenerosFavoritos();
        }
    }//GEN-LAST:event_jTabbedPaneTodoStateChanged

    private void jButtonLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLogoutActionPerformed
        // Limpiar campos
        jTextFieldIntent.setText("");
//        jTextPaneChat.setText("");

        // Reiniciar variable del usuario actual
        InterfazLogin.usuarioActual = null;

        // Cerrar la interfaz actual
        this.dispose();

        // Mostrar la interfaz de inicio de sesión
        InterfazLogin login = new InterfazLogin();
        login.setVisible(true);
    }//GEN-LAST:event_jButtonLogoutActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfazCb.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfazCb.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfazCb.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfazCb.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterfazCb().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonEnviar;
    private javax.swing.JButton jButtonLogout;
    private javax.swing.JLabel jLabelMostrarGeneros;
    private javax.swing.JPanel jPanelCb;
    private javax.swing.JPanel jPanelGen;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPaneTodo;
    private javax.swing.JTextField jTextFieldIntent;
    private javax.swing.JTextPane jTextPaneChat;
    // End of variables declaration//GEN-END:variables
}
